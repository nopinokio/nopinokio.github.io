{"meta":{"title":"nopinokio blog","subtitle":null,"description":null,"author":"nopinokio","url":"https://nopinokio.github.io"},"pages":[{"title":"Guest Book","date":"2017-11-06T02:39:07.000Z","updated":"2017-11-06T03:36:38.000Z","comments":true,"path":"guest-book/index.html","permalink":"https://nopinokio.github.io/guest-book/index.html","excerpt":"","text":"저에게 연락하는건 숨쉬기보다 쉽습니다."},{"title":"about","date":"2017-10-27T08:30:51.000Z","updated":"2019-09-29T05:28:40.532Z","comments":false,"path":"about/index.html","permalink":"https://nopinokio.github.io/about/index.html","excerpt":"","text":"12345678910111213&#123; name: \"전명익\", engName: \"Myung ik Jeon\" nickName: \"nopinokio\", birthDay: \"1990-09-20\", gender: \"Male\", address: \"\", Github: \"https://github.com/nopinokio\", skills: [\"HTML\", \"CSS\", \"JavaScript\", \"jQuery\", \"SASS\", \"LESS\", \"EJS\", \"Git\"], blog: \"\", Email: \"nopinokio90@gmail.com\", description: [\" \"] &#125;"}],"posts":[{"title":"(soft & calm) 잔잔한 음악 모음","slug":"9-005-soft-calm-music","date":"2017-11-16T09:01:01.000Z","updated":"2017-11-16T07:21:32.000Z","comments":true,"path":"2017/11/16/9-005-soft-calm-music/","link":"","permalink":"https://nopinokio.github.io/2017/11/16/9-005-soft-calm-music/","excerpt":"","text":"01 - Calm Music List 최근들어 작업하면서 트위치 스트리머 게임 방송을 옆에 틀어놓고 작업하는경우가 많다.원래 게임방송 잘 안보는 편이였지만 최근 시작한 배틀그라운드라는 게임의 영향이 크다.하지만 게임 할시간은 없고…방송을 보면서 그나마 위안(?)을 얻는다.드라마 틀어놓고 일하시는 사람들마냥 …맥선생 닉네임으로 활동하고 배틀그라운드에서는 주안코리아 라는 닉네임을 사용하는 스트리머 방송을 보는데게임을 하면서, 아니면 게임 쉬는 타임일때 음악을 자주 틀어놓는다.그 게임방송에 나오는 음악들이 나한테는 굉장히 좋아서 그 주안코리아님의 사운드클라우드에 들어가서 팔로우 까지 하게되었다.그중 잔잔한 음악을 공유했다.","categories":[{"name":"Interests","slug":"Interests","permalink":"https://nopinokio.github.io/categories/Interests/"},{"name":"Music","slug":"Interests/Music","permalink":"https://nopinokio.github.io/categories/Interests/Music/"}],"tags":[{"name":"Interests","slug":"Interests","permalink":"https://nopinokio.github.io/tags/Interests/"},{"name":"Music","slug":"Music","permalink":"https://nopinokio.github.io/tags/Music/"},{"name":"작업할때 듣는 음악","slug":"작업할때-듣는-음악","permalink":"https://nopinokio.github.io/tags/작업할때-듣는-음악/"},{"name":"guitar","slug":"guitar","permalink":"https://nopinokio.github.io/tags/guitar/"},{"name":"calm music","slug":"calm-music","permalink":"https://nopinokio.github.io/tags/calm-music/"},{"name":"soft music","slug":"soft-music","permalink":"https://nopinokio.github.io/tags/soft-music/"}]},{"title":"분위기 있는 Jazz(재즈) 음악","slug":"9-004-jazz-music","date":"2017-11-16T02:54:50.000Z","updated":"2017-11-16T04:48:00.000Z","comments":true,"path":"2017/11/16/9-004-jazz-music/","link":"","permalink":"https://nopinokio.github.io/2017/11/16/9-004-jazz-music/","excerpt":"","text":"01 - Instrumental Jazz Mix - Cafe Restaurant Background Music 2시간 32분 연속 재생 02 - Bossa Nova Jazz Instrumental Mix : Cafe Restaurant Background Music 3시간 19분 연속재생 03 - 1 Hour Godot - Fragrance of Dark Coffee - Jazz Soul 58분 연속재생 04 - Jazz Piano Bar Music: Restaurant and Club Ambient Music 1시간 7분 재즈곡 연속듣기 05 - Jazz &amp; Conversation Suite - 33 great jazz tracks ! 클래식한 재즈곡들 모음2시간 11분 연속 재생","categories":[{"name":"Interests","slug":"Interests","permalink":"https://nopinokio.github.io/categories/Interests/"},{"name":"Music","slug":"Interests/Music","permalink":"https://nopinokio.github.io/categories/Interests/Music/"}],"tags":[{"name":"Interests","slug":"Interests","permalink":"https://nopinokio.github.io/tags/Interests/"},{"name":"Music","slug":"Music","permalink":"https://nopinokio.github.io/tags/Music/"},{"name":"BackgroundMusic","slug":"BackgroundMusic","permalink":"https://nopinokio.github.io/tags/BackgroundMusic/"},{"name":"Jazz","slug":"Jazz","permalink":"https://nopinokio.github.io/tags/Jazz/"},{"name":"작업할때 듣는 음악","slug":"작업할때-듣는-음악","permalink":"https://nopinokio.github.io/tags/작업할때-듣는-음악/"}]},{"title":"php.ini 환경설정","slug":"2-001-php-ini-setting","date":"2017-11-14T02:08:52.000Z","updated":"2017-11-16T00:24:40.000Z","comments":true,"path":"2017/11/14/2-001-php-ini-setting/","link":"","permalink":"https://nopinokio.github.io/2017/11/14/2-001-php-ini-setting/","excerpt":"","text":"php 오류 표시PHP는 기본적으로 웹상에 에러 메시지를 표시하지 않도록 설정되어 있다. 개발시에는 오류를 노출해서 개발에 용이 하도록 한다. // 파일 경로C &gt; Bitnami &gt; wampstack-5.6.30-5 &gt; php &gt; php.ini기본 설정 : display_errors = Off개발 시에는 오류가 표시되도록 “Off”를 “On”으로 변경한다. Opacache 활성화이 설정을 하지 않으면 소스를 수정 후 브라우저로 즉각 확인이 안되서 개발 시 불편하다.기본 설정 : opcache.enable = 1개발 시에는 “1”을 “0”으로 변경해서 수정사항이 바로 반영되도록 한다. 환경설정 수정후 적용시변경된 부분을 반영하려면 Bitnami WAMP Stack 프로그램 메뉴 중 Manage Servers에서 Apache Web Server를 Restart한다.","categories":[{"name":"Back-end","slug":"Back-end","permalink":"https://nopinokio.github.io/categories/Back-end/"},{"name":"php","slug":"Back-end/php","permalink":"https://nopinokio.github.io/categories/Back-end/php/"}],"tags":[{"name":"web","slug":"web","permalink":"https://nopinokio.github.io/tags/web/"},{"name":"back-end","slug":"back-end","permalink":"https://nopinokio.github.io/tags/back-end/"},{"name":"bitnami","slug":"bitnami","permalink":"https://nopinokio.github.io/tags/bitnami/"},{"name":"php","slug":"php","permalink":"https://nopinokio.github.io/tags/php/"},{"name":"appache","slug":"appache","permalink":"https://nopinokio.github.io/tags/appache/"}]},{"title":"자바스크립트 성능 최적화-2 렌더링","slug":"1-008-javascript-performance2","date":"2017-11-08T12:52:39.000Z","updated":"2017-11-16T00:29:20.000Z","comments":true,"path":"2017/11/08/1-008-javascript-performance2/","link":"","permalink":"https://nopinokio.github.io/2017/11/08/1-008-javascript-performance2/","excerpt":"","text":"자바스크립트 성능 최적화-1 포스트와 마찬가지로 NHN은 이렇게 한다 자바스크립트 성능 이야기의 내용들이다.브라우저 렌더링 과정 및 기타에서도 속도를 향상 시킬수 있다. 렌더링 및 기타 방법에는 크게 아래 4가지 방법이 있다. reflow, repaint 최소화노출 제어를 통한 reflow 최소화 (display 속성 이용)DOM, 객체 캐싱기타 reflow, repaint 최소화같거나 동일한 작업은 그룹을 묶어 실행한다. (구버전 브라우저에서는 전의 작업의 경우, 여러번의 reflow와 repaint가 발생하나 최신 버전 크롬의 경우 한번만 발생한다고 함) 정규표현식탐색 대상을 축소하고 반복문의 경우, 정규 표현식을 변수 처리하여 컴파일 횟수를 축소한다.예)1234567891011// 전var width = document.getElementById(\"layer1\").style.width;document.getElementById(\"layer2\").style.width = width;var heigth = document.getElementById(\"layer3\").style.heigth;document.getElementById(\"layer4\").style.heigth = heigth; // 후var width = document.getElementById(\"layer1\").style.width;var heigth = document.getElementById(\"layer3\").style.heigth;document.getElementById(\"layer2\").style.width = width;document.getElementById(\"layer4\").style.heigth = heigth; 노출 제어를 통한 reflow 최소화 (display 속성 이용)여러가지 속성이 변경될 경우 최종 결과가 반영되는 마지막 시점에 요소를 출력하면 reflow, repaint 횟수를 줄일 수 있다. 12345678910111213// 전var element = document.getElementById(\"list\");for (var i=0; i&lt;100; i++) &#123; element.style.width = i + \"px\";&#125; // 후var element = document.getElementById(\"list\");element.style.display = \"none\";for (var i=0; i&lt;100; i++) &#123; element.style.width = i + \"px\";&#125;element.style.display = \"block\"; DOM, 객체 캐싱반복되는 요소를 미리 선언 후 사용하게 되면 성능이 향상됨 12345678910// 캐싱 전for (var i=0; i&lt;100; i++) &#123; document.getElementById(\"test\").style.left = i + \"px\";&#125; // 캐싱 활용 후var obj = document.getElementById(\"test\");for (var i=0; i&lt;100; i++) &#123; obj.style.left = i + \"px\";&#125; 기타1) jquery 객체를 캐싱한 코드보다 직접 DOM을 사용하는 코드가 훨씬 빠르다.2) 요소를 찾을때는 id를 사용하는것이 좋다. class나 다른 방법보다 id를 통해 접근하는게 더 빠르다.","categories":[{"name":"Front-end","slug":"Front-end","permalink":"https://nopinokio.github.io/categories/Front-end/"},{"name":"javascript","slug":"Front-end/javascript","permalink":"https://nopinokio.github.io/categories/Front-end/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://nopinokio.github.io/tags/javascript/"},{"name":"web","slug":"web","permalink":"https://nopinokio.github.io/tags/web/"},{"name":"performance","slug":"performance","permalink":"https://nopinokio.github.io/tags/performance/"}]},{"title":"자바스크립트 성능 최적화-1 코드 스타일","slug":"1-007-javascript-performance1","date":"2017-11-08T12:39:11.000Z","updated":"2017-11-16T00:29:18.000Z","comments":true,"path":"2017/11/08/1-007-javascript-performance1/","link":"","permalink":"https://nopinokio.github.io/2017/11/08/1-007-javascript-performance1/","excerpt":"","text":"nhn은 이렇게 한다 자바스크립트 성능 이야기의 내용들을 발췌하였음바로 활용할 수 있는 부분을만 추려서 요약한다.코드 스타일 부분에서는 크게 아래 3가지를 통해 성능을 향상시킬 수 있다. 변수, 객체 생성 및 접근정규표현식반복문 변수, 객체 생성 및 접근1) 배열 생성 : var arr = []; 이 var arr = new Array() 보다 빠름2) 배열 데이터 초기화 및 접근 : arr[i] = i;이 vs arr.push(i); 보다 빠름3) 객체 생성 : var obj = {}; vs var obj = new Object(); 보다 빠름4) 객체 데이터 초기화 및 접근 : obj.a = 1; vs obj[“a”] = 1; 보다 빠름5) 문자열 생성 : var str = “test”; vs var str = new String(“test”); 보다 빠름 정규표현식탐색 대상을 축소하고 반복문의 경우, 정규 표현식을 변수 처리하여 컴파일 횟수를 축소한다.예)123456789var arr = [1, 2, 3];for (var i=0; i&lt;arr.length; i++) &#123; // ...&#125; var len = arr.length;for (var i=0; i&lt;len; i++) &#123; // ...&#125; 정규표현식1) for-in은 사용하지 말것. 반복문 중 가장 느림for-in 외의 반복문은 주어진 배열 객체를 배열의 특성에 맞게 순차적으로 모든 요소를 탐색한다.반면 for-in 구문은 배열을 배열이 아닌 일반 객체로 취급하며, 반복 시점마다 객체의 모든 속성을 무작위로 탐색한다. 2) for문 안에서 Array.length를 직접 사용하지 것보다 선언 후 사용하는게 더 빠르다.for문 안에서 length를 구하게되면 반복횟수만큼 length를 구하는 작업을 반복하게 된다.예)123456789var arr = [1, 2, 3];for (var i=0; i&lt;arr.length; i++) &#123; // ...&#125; var len = arr.length;for (var i=0; i&lt;len; i++) &#123; // ...&#125;","categories":[{"name":"Front-end","slug":"Front-end","permalink":"https://nopinokio.github.io/categories/Front-end/"},{"name":"javascript","slug":"Front-end/javascript","permalink":"https://nopinokio.github.io/categories/Front-end/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://nopinokio.github.io/tags/javascript/"},{"name":"web","slug":"web","permalink":"https://nopinokio.github.io/tags/web/"},{"name":"performance","slug":"performance","permalink":"https://nopinokio.github.io/tags/performance/"}]},{"title":"김연아 멘탈이 보이는 우문현답 인터뷰","slug":"9-003-kim-yuna-interview","date":"2017-11-08T10:31:15.000Z","updated":"2017-11-16T00:42:32.000Z","comments":true,"path":"2017/11/08/9-003-kim-yuna-interview/","link":"","permalink":"https://nopinokio.github.io/2017/11/08/9-003-kim-yuna-interview/","excerpt":"","text":"마인드 컨트롤 요령이 있나? “그 동안 많은 경기를 치루면서 부담도 많이 느껴봤고 긴장도 많이 했었다. 아직까지는 실감도 잘 안나고, 긴장이 아직 덜 된다. 시간이 또 지나면 모르겠지만 다른 사람들로 인한 부담감보단 내가 잘 할 수 있을까, 내가 원하는 만큼 할 수 있을까 이런 걱정이 더 된다. 그런 걱정거리를 없애려면 그만큼 연습이 더 완벽하게 되어야 하고, 차근차근 준비가 된다면 그런 걱정없이 편안한 마음으로 내가 하던 대로 하면 된다는 생각으로 하면 좋은 결과가 있을 거라고 믿고싶다.” (어릿광대를 보내주오)의상논란에 대해 “가장 중요한 건 경기력이다.” 2013 세계피겨선수권에 임하는 각오 “내가 얼마나 잘하느냐에 따라 올림픽 출전권 수가 늘어난다. 목표는 최소 2장이다. 나 혼자 출전하지 않고 후배들에게 올림픽이라는 큰 무대를 경험할 수 있는 기회를 주고 싶다.” 이번 올림픽이 러시아에서 열리게 되는데, 리프니츠카야에 대한 평가와 텃세가 어느 정도일지 걱정하는 사람들이 많다. 그에 대한 대책은? “선수가 매번 잘 하 수도 없고 매번 똑같은 기준으로 심사가 이루어지는 것도 아니다. 이런 것들은 내가 해결해야 할 문제가 아니다. 일단 내가 만족스러운 경기를 해야하고, 그에 따른 결과가 어떻게 나오든 받아들어야 한다. 내가 준비한 만큼 발휘하는 것이 중요하다.” 세계랭킹 1위로서의 김연아가 되기까지 포기해야 하는 것 중에 가장 싫었던 것은 “또래에 비해 일상에서의 자유가 없다는 것이 가장 아쉽다. 평범한 일상이지만 포기할 수 없는 것들. 포기하기에 소중한 것이기도 하다.” 실수를 연발하고도 200점을 넘긴 아사다 마오의 고득점 논란을 어떻게 생각하는가 “나는 심판이 아니기때문에 내가 판단할 문제는 아니다.” 세계챔피언이라는 타이틀 때문에 올림픽이 부담일 수 있겠다. “크고 작은 대회같은 것은 없다. 모든 대회가 같은 경기라 생각하기에 그런 부담을 느끼지 않드록 노력한다.” 은퇴 후 평범한 20대로 돌아가게 된 소감 “완전히 다른 삶을 살게 될거라 생각하니 기대가 되는 한편 두렵기도 하다. 그래도 걱정보단 기대가 더 큰 것 같다. 앞으로도 스포츠에서 계속 활동을 하고 있을 것이다. 피겨는 내가 제일 잘했던 것이고 제일 잘 아는 것인 만큼 끝까지 피겨를 놓지 않을 것이다. 후배들에게도 도움을 주고싶다.” 다른 선수들의 잘못된 점프에 대해 “잘못 된 점프가 결코 쉬운 점프는 아니다.” 목표가 올림픽 금메달인가? “어느 누구에게든 올림픽 챔피언은 가장 높은 자리이다. 그 자리에 설 수 있었으면 좋겠다.” 트리플 악셀은 시도하지 않는 이유 “배웠던 적이 있다. 그 과정에서 부상을 당했었다. 트리플 악셀은 매우 어려운 기술이다. 익히는 데도 오랜시간이 걸리는 기술이다. 지금 이 시점에서 새로운 기술을 익히는 것은 좋은 방법이 아니라고 생각한다. 내가 구사할 수 있는 기술을 다듬고 실수를 줄이는 것이 더 중요하다고 생각한다.” 선수생활 중 느낀 보람 또는 아쉬움이 있느냐 “세계선수권대회, 올림픽 등 많은 선수들이 목표로 하는 대회를 위해 열심히 훈련하며 좋은 성과를 얻었을 때 가장 보람을 느꼈던 것 같다. 힘들었던 순간들도 많았지만 그런 시간을 견디며 훈련을 했었기에 좋은 결과가 나왔다고 생각한다. 매 순간마다 후회를 남기지 않겠다는 마음으로 최선을 다하고자 노력했기 때문에 아쉬움이 남지는 않는다” 다른 한국 스케이터들에게 올림픽에 나갈 기회를 줘야한다는 책임감을 느낀다고 말한 적이 있습니다. 2014 소치 올림픽 철전권 3장을 확보했다. 느낌이 어떤가? “나는 이미 2010년 올림픽을 한국의 어린 스케이터와 함께 경험했다. 그 때 올림픽은 모든 운동선수들에게 가장 큰 대회이고 잊지 못할 경험이라고 느꼈다. 그래서 한국의 어린 스케이터들과 함께 다시 한 번 경험하고 싶고, 그걸 성취하게 돼서 행복하다.” 선수생활은 언제까지 지속할 것 같은 가 “그런 질문을 받을 때마다 정확하게 답을 못드려서 죄송하다. 지난 월드챔피언십 이후로 평창에만 열중하고 있다보니 개인적인 일에 대해 생각할 시간이 부족했던 것 같다. 이제 휴식을 취하면서 결정을 하게 될 것 같다. 아직 결정은 나지 않았지만 계속 하는대까지는 최선을 다해서 여러분께, 팬분들께 좋은 연기를 보여주고 싶다.” 리프니츠카야가 우승 후보로 거론되는데 “금메달이 누구냐, 은메달이 누구냐, 동메달이 누구냐 이런 이야기는 항상 있기 때문에 신경 쓰지 않는다. 가장 중요한 것은 내가 잘하는 것이다.” 리프니츠카야의 연기를 봤느냐 “리프니츠카야뿐만 아니라 다른 선수들의 경기도 봤다. 내가 탈 경기장이라 눈에 익히려고 노력했다. 리프니츠카야에 대해 말이 많은데 의미가 다르다. 그는 시니어를 데뷔하지만, 난 은퇴를 앞두고 있다. 다른 선수들의 경기력을 특별히 언급하는 건 의미가 없다.” 소치 올림픽에서 주목하는 선수가 있냐 “김해진, 박소연.” (소치올림픽이 끝난 후 공동기자회견에서) 결과에 만족하냐 “이미 끝이 났다. 점수에 대해서는 저도 크게 기대하지 않았다. 실수없이 연기한 것에 만족한다.” 자신만의 필살기가 있나 “필살기를 준비하기보다는 전체적으로 모두 잘하기 위해 훈련을 하는 것이다. 필살기는 특별히 없는 것 같다.” 앞으로 엔터테이너 데뷔 등 다른 생활을 할 가능성 “다른 것을 할 수도 있지만 그래도 내가 해야할 것은 피겨다. 지금 내가 제일 잘하는 것을 잘하고 싶다. 지금은 선수지만 어린 선수들을 보면 가르쳐보고 싶다는 생각을 했다. 기회가 된다면 한 번 해보고싶다.” 경쟁자가 없는 것이 부담이 될 수도 있는데 “나는 내가 책임질 수 없는 말은 하지 않는다. 내가 내 입으로 경쟁할 선수가 없다고 한 적이 없다. 내뱉은 말만 책임지면 될 것 같다. 부담이 되기는 하지만 내 자신의 목표를 이루는 게 가장 중요하다. 신경쓰지 않고 복귀하면서 생각했던대로 1등을 하기 위한 것보다 마지막 선수생활을 잘 마무리하는 것이 목표이다.” 지키고 싶은 인생철학이 있나? “남들이 저를 생각할 때 김연아는 성공했지만 그래도 항상 바르고 겸손하다는 생각을 갖게 하고싶다. 그런 인간관계에 있어서 항상 신경을 쓰게 되는 것 같다. 그래서 운동에 있어서도 내가 이걸 꼭 해내야 되고, 어떻게 해야겠다 이런 것도 있지만 인간관계에 있어서 중요한 걸 많이 느끼게 된다. 아직은 어리지만 특히 내가 공인이기 때문에 사람들도 많이 만나고 인터뷰를 하면서 많은 분들을 만나게 됐는데, 그런 것들을 많이 느끼게 되었다. 그냥 ‘김연아 한 번 봤는데 좋은 사람이다.’ 이렇게 생각했으면 좋겠다.” 17년 선수생활을 마감하는 소감 “저보다 더 간절한 사람한데 금메달을 줬다고 생각하자고 이야기했다. 좋은 점수는 기대하지 않았다. 쇼트 프로그램때 분위기상 그런 예상이 가능했기때문에 기대를 많이 했을 경우에는 그만큼 실망도 큰 법이니깐.. 모든 짐을 내려놨다는게 그 자체만으로도 행복한 것 같다. 피겨를 그만 두더라도 앞으로 살아가는데 좀 더 배울 점들을 하나씩 얻는 것 같아서 좋다. 밴쿠버올림픽 챔피언, 소치올림픽 은메달리스트보다는 그냥 저라는 선수가 있었다는거, 그걸로 만족할 것 같다.” 최고가 된 노하우 만약 내가 김연아의 후배라면 가장 배우고 싶은 점이 바로 ‘집중력’이라는 말에 김연아는 누구나 어떤 일을 할 때는 집중해야 하지 않느냐고 반문했다. 물론이다. 누구나 어떤 일을 할 때 집중해서 한다. 그러나 김연아의 집중력이란 알다시피 더 특별하지 않은가 말이다.“직장인과 다를 게 없다고 생각해요. 운동 선수들이 찰나의 싸움이기 때문에 좀 더 그래 보이는 게 아닐까요?짧은 시간에 해내야 하니까요. 제가 다른 점이 있다면 글쎄요,집중력이라기보다는 흐트러진 집중력을 되돌리는 능력이 좀 더 있는 것 같아요.예를 들어 경기 중에 실수하면 모든 리듬이 얽히면서 흐트러지거든요.그럴 때 빨리 제자리를 찾아야 하죠. 실수가 전부가 되게 해서는 안 되니까요.워낙 단순한 성격이고 많은 생각을 한 번에 하지 않는 스타일이라서 금방 잊고 잘 되돌렸던 것 같아요.”모두 열심히 사는데 자기 자신이라고 특별할 게 없다며 겸손해하는 김연아.그는 덧붙여 “현재에 충실한 게 중요한 것 같아요. 선수 생활을 할 때도 너무 먼 곳까지 생각하지 않았어요.지금 내가 하는 것만 생각했죠. ‘이걸 잘하자. 이걸 하고 나면 그다음, 그다음’, 그렇게 눈앞에 보이는 지점에 집중했어요.저도 흔들릴 때가 많거든요. 그런데 너무 앞선 것, 먼 것을 생각하면 머릿속이 복잡해지고 지금 것도 망치게 돼요.순간에 충실한 게 큰 도움이 되었죠.”","categories":[{"name":"Interests","slug":"Interests","permalink":"https://nopinokio.github.io/categories/Interests/"},{"name":"Miscellaneous","slug":"Interests/Miscellaneous","permalink":"https://nopinokio.github.io/categories/Interests/Miscellaneous/"}],"tags":[{"name":"Interests","slug":"Interests","permalink":"https://nopinokio.github.io/tags/Interests/"},{"name":"김연아","slug":"김연아","permalink":"https://nopinokio.github.io/tags/김연아/"}]},{"title":"중독의 진짜 이유","slug":"9-002-reason-for-poisoning","date":"2017-11-08T10:22:21.000Z","updated":"2017-11-16T00:44:04.000Z","comments":true,"path":"2017/11/08/9-002-reason-for-poisoning/","link":"","permalink":"https://nopinokio.github.io/2017/11/08/9-002-reason-for-poisoning/","excerpt":"","text":"무엇이 사람들을 헤로인에 중독되게 할까요?누구나 아는 뻔한 이유잖아요.헤로인이 헤로인 중독을 일으킵니다.만약 당신이 헤로인을 20일 동안 쓰면, 21일째가 되는 날 당신의 몸이 약물을 미친 듯이 원하게 될 겁니다.이게 바로 중독입니다.그런데 이 설명에는 모순점이 있습니다.우리가 중독에 대해서 알고 있다고 생각하는 거의 모든 것이 잘못되었거든요.쥐를 한 마리 데려다가 철장에 넣고 물병 두 개를 줍니다.하나는 그냥 물, 다른 하나는 헤로인 혹은 코카인을 넣은 물입니다.거의 모든 경우에 쥐는 약물이 들어간 물에 집착하게 됩니다.그리고는 죽을 때까지 조금, 조금 더 마시려고 약물 병에 매달리게 됩니다.하지만 1970년에, 심리학자 블루스브루스 알렉산더는 이 실험에서 무언가 이상한 점을 발견합니다.쥐가 철장에 혼자 갇혀있다는 점이었습니다.그래서 그는 쥐 놀이공원을 만들었습니다.그냥 쥐 천국입니다.그곳은 쥐가 색색의 공과 돌아다닐 터널이 가득한 우리였습니다.함께 놀 많은 친구, 그리고 섹스도 내키는 대로 할 수 있었습니다.쥐가 쥐 마을에서 원할만한 모든 것이 있는 쥐 우리.그리고는 똑같이 물병 두 개를 주고 실험을 해봤습니다.그러자 신기한 일이 일어났습니다.쥐 공원에서는 쥐들이 거의 약물이 든 물병을 쓰지 않은 겁니다.어떤 쥐도 강박적으로 약물을 복용하지 않았고 과다복용하지도 않았습니다.하지만 이게 다 쥐에게만 적용되는 얘기일 수도 있잖아요?그래요, 다행히도 비슷한 실험이 인간에게도 실행되었었어요.베트남 전쟁입니다.베트남 전쟁에 참여한 20%의 미군들이 대량의 헤로인을 사용하고 있었어요.미국사람들은 공황 했습니다.만약 전쟁이 끝나고 백만 명이 넘는 마약쟁이들이 미국땅으로 돌아와 설치면 어떡해요!하지만 전쟁에서 돌아온 군인들을 보고 연구결과에서는 놀라운 결과를 보여줬습니다.그들은 금단현상도 없고 심지어 재활원으로 보내지지도 않았습니다.집에 돌아온 95%의 사용자들이 그냥 약물 사용을 멈췄습니다.만약 중독의 옛날 이론을 믿는다면, 이건 말도 안 되는 결과입니다.하지만 당신이 알렉산더 박사의 이론을 믿는다면, 당연한 결과일 뿐입니다.어느 순간에나 죽이고, 죽으라고 강요당하는 순간에는 헤로인을 하는 건 시간을 보내기 엄청 좋은 방법입니다.전쟁 후 당신의 친구들과 가족들이 있는 좋은 집으로 돌아가는 것은 쥐를 첫 번째 실험의 외로운 철장에서 꺼내주어 두 번째 쥐 놀이 공원에 넣어주는 것과 같은 효과를 볼 수 있는 겁니다.","categories":[{"name":"Interests","slug":"Interests","permalink":"https://nopinokio.github.io/categories/Interests/"},{"name":"Miscellaneous","slug":"Interests/Miscellaneous","permalink":"https://nopinokio.github.io/categories/Interests/Miscellaneous/"}],"tags":[{"name":"Interests","slug":"Interests","permalink":"https://nopinokio.github.io/tags/Interests/"}]},{"title":"백범 김구의 관상보다 심상(心相)의 소중함","slug":"9-001-kim-gu-proverb","date":"2017-11-08T10:02:03.000Z","updated":"2017-11-16T00:45:06.000Z","comments":true,"path":"2017/11/08/9-001-kim-gu-proverb/","link":"","permalink":"https://nopinokio.github.io/2017/11/08/9-001-kim-gu-proverb/","excerpt":"","text":"1892년 백범 김구 선생이 17세 때 우리나라에서 실시된 마지막 과거에 응시했다. 하지만 매관매직이 판을 치고 있던 당시의 과거시험은 이미 합격자가 정해져 있었다. 이에 크게 실망한 선생은 출세에 대한 미련을 버리고 풍수와 관상을 공부하기 시작했다. 그런데 자기의 얼굴에는 한 군데도 부귀한 상이 없고 천하고 가난한 흉상 밖에 없었다. 그러던 중 ‘마의상서(麻衣相書)’에서 선생의 운명을 바꿀 한 구절을 발견했다. 相好不如身好 身好不如心好 心好不如德好(관상은 체상(건강)보다 못하고, 체상은 심상보다 못하고, 심상은 덕상보다 못하다.) ‘마의 상서’는 중국의 마의선인이 쓴 관상학 책으로, 선인이 어느날 시골길을 걷던 중 땔감을 구하러 가는 머슴을 보고 “얼마 안가서 죽을 상이니 너무 무리해서 일하지 말게”라고 충고했다. 그러자 머슴은 망연자실하여 계곡을 바라보면서 탄식하고 있었다. 그 때 나뭇잎에 매달려서 떠내려 오는 개미떼를 발견했다. 마치 자신의 운명과도 같아 연민의 정을 느낀 그는 개미떼를 살려 주었다. 며칠 후 선인이 그 머슴을 다시 보니 그의 얼굴에서 죽음의 그림자가 사라지고 부귀영화를 누릴 상으로 바뀌어 있었다. 개미를 구한 이야기를 듣고 크게 깨달은 마의선인은 ‘마의 상서’의 마지막장에 이 글을 남겼다고 한다. 관상보다 심상(心相)의 소중함을 깨달은 김구 선생은 심기일전해 오직 마음수양에 전념했다고 한다. 어릴 때는 나보다 중요한 사람이 없고,나이 들면 나만큼 대단한 사람이 없으며,늙고 나면 나보다 더 못한 사람이 없다.돈에 맞춰 일하면 직업이고,돈을 넘어 일하면 소명이다.직업으로 일하면 월급을 받고,소명으로 일하면 선물을 받는다.칭찬에 익숙하면 비난에 마음이 흔들리고,대접에 익숙하면 푸대접에 마음이 상한다.문제는 익숙해져서 길들여진 내 마음이다.집은 좁아도 같이 살 수 있지만,사람 속이 좁으면 같이 못 산다.내 힘으로 할 수 없는 일에 도전하지 않으면,내 힘으로 갈 수 없는 곳에 이를 수 없다.사실 나를 넘어서야 이곳을 떠나고,나를 이겨내야 그곳에 이른다.갈 만큼 갔다고 생각하는 곳에서 얼마나 더 갈 수 있는지 아무도 모르고,참을 만큼 참았다고 생각하는 곳에서 얼마나 더 참을 수 있는지 누구도 모른다.지옥을 만드는 방법은 간단하다.가까이 있는 사람을 미워하면 된다.천국을 만드는 방법도 간단하다.가까이 있는 사람을 사랑하면 된다.모든 것이 다 가까이에서 시작된다.상처를 받을 것인지 말 것인지 내가 결정한다.또 상처를 키울 것인지 말 것인지도 내가 결정한다.그 사람 행동은 어쩔 수 없지만 반응은 언제나 내 몫이다.산고를 겪어야 새 생명이 태어나고,꽃샘추위를 겪어야 봄이 오며,어둠이 지나야 새벽이 온다.거칠게 말할수록 거칠어지고,음란하게 말할수록 음란해지며,사납게 말할수록 사나워진다.결국 모든 것이 나로부터 시작되는 것이다.나를 다스려야 뜻을 이룬다.모든것은 내 자신에 달려 있다 -백범 김구-","categories":[{"name":"Interests","slug":"Interests","permalink":"https://nopinokio.github.io/categories/Interests/"},{"name":"Miscellaneous","slug":"Interests/Miscellaneous","permalink":"https://nopinokio.github.io/categories/Interests/Miscellaneous/"}],"tags":[{"name":"Interests","slug":"Interests","permalink":"https://nopinokio.github.io/tags/Interests/"}]},{"title":"퍼블리셔, 프론트앤드디벨로퍼 면접 인터뷰 관련 질문","slug":"1-006-web-publisher-front-end-developer-interview-question","date":"2017-11-08T08:57:03.000Z","updated":"2017-11-16T00:29:46.000Z","comments":true,"path":"2017/11/08/1-006-web-publisher-front-end-developer-interview-question/","link":"","permalink":"https://nopinokio.github.io/2017/11/08/1-006-web-publisher-front-end-developer-interview-question/","excerpt":"","text":"일반적인 질문 Twitter,Facebook 등의 SNS를 사용하시나요? 사용한다면, 누구를 팔로우 하고 있나요? GitHub을 사용하시나요? 사용한다면, 어떤 프로젝트를 Watch 혹은 Fork하시나요? 자주 보는 Blog가 있습니까? 버전 관리 시스템은 어떤 것들을 사용해보셨습니까? 선호하는 개발 환경은 무엇입니까? (운영체제, 에디터, 브라우저, 도구 등등) 당신이 웹 페이지를 만들 때의 과정을 설명 해주실 수 있을까요? 점진적 향상법(progressive enhancement)과 우아한 성능저하법(graceful degradation)의 차이를 설명하실 수 있습니까? “누구도 성공하지 못합니다” 라고 말하면 보너스 포인트를 주세요. 각 특색을 설명을 한다면, 더 높은 보너스 포인트를 주세요. “시멘틱 HTML(Semantic HTML)”이 무엇을 뜻하는지 설명해주세요. “최소화(minification)”가 무엇을 하는 것입니까? 여러 도메인을 이용하여 서버 사이트 데이터를 제공하는 것이 더 나은 이유는 무엇인가요? 브라우저가 한 번에 1개의 도메인에서 다운로드 받는 리소스는 몇 개 인가요? 만약에 디자인을 표현하기 위해 8개의 다른 Stylesheet를 가지고 있다면, 사이트에서는 어떻게 통합하실 건가요? 파일의 연결법을 찾아내세요. Build system을 이용한 결합없이, @import를 사용하면 점수를 깎으세요. 당신이 프로젝트에 합류했습니다. 근데 그들은 Tab을 이용하고, 당신은 Sapce를 사용했습니다. 어떻게 하실건가요? :retab! 명령어를 아는지 확인 간단한 Slideshow 페이지를 만들어보세요. Javascript를 사용하지 않고 만들었다면, 보너스 점수가 있습니다. 당신의 코드의 성능을 테스트하기 위해서 사용하는 도구가 무엇입니까? 올해 당신이 익히고 싶은 기술이 있다면, 그것은 무엇입니까? 페이지 로딩 시간을 줄이는 3가지 방법은? 표준의 중요함을 설명하세요. HTML에 관련된 질문들 doctype이 무엇을 하는 것이고, 몇 번 지정할 수 있나요? 표준모드(standards mode)와 쿽스모드(quirks mode)의 다른 점은 무엇인가요? XHTML을 이용한 페이지의 한계점은 무엇이 있나요? application/xhtml+xml으로 지정한 페이지에 어떠한 문제가 있나요? 다국어가 포함된 페이지는 어떤 방식으로 제공하나요? HTML5에서 XHTML문법을 사용할 수 있나요? HTML5에서 XML을 어떻게 사용하나요? data-속성은 무엇을 하는 것인가요? HTML4에서 콘텐츠 모델(content models)은 무엇이며, HTML5의 그것과 다른 점은 무엇인가요? HTML5를 오픈웹플랫폼(open web platform)으로 생각해본다면, 어떤 것들로 구성돼 있을까요? 쿠키(Cookies)와 세션저장소(sessionStorage)와 로컬저장소(localStorage)의 차이점을 설명해주세요. 면접, 인터뷰시 Javascript에 관련된 질문들 사용해 본 Javascript 라이브러리들을 말씀해주세요. Java와 Javascript의 다른 점은 무엇인가요? undefined와 undeclared 변수는 무엇인가요? 클로져(Closure)는 무엇이며, 어떻게/왜 사용하는지 설명해주세요. 클로져를 만들 때 선호하는 패턴은 무엇인가요? argyle (IIFEs에만 적용할 수 있다) 익명함수(anonymous functions)는 주로 어떤 상황에서 사용하나요? “Javascript 모듈 패턴(Javascript module pattern)”이 무엇인지 설명을 해주시고, 언제 사용하는지도 말씀해주시기 바랍니다. “네임스페이스(namespacing)”에 대해서 언급을 하면, 보너스 포인트가 있습니다. 당신의 모듈이 네임스페이스가 없는 상황이라면? 당신의 코드를 어떻게 구성하는지?(모듈 패턴, Class기반 상속?) 호스트 객체(Host Objects)와 네이티브 객체(Native Objects)의 차이점은 무엇인가요? 다음 코드의 차이점은 무엇인가요? function Person(){} var person = Person() var person = new Person() .call과 .apply의 차이점은 무엇인가요? Function.prototype.bind을 설명 하시오 코드 최적화를 하는 시점은 언제인가요? Javascript에서 어떻게 상속을 하는지 설명할 수 있나요? “누구도 할 수 없어요” 같은 재밌는 대답 시에 보너스 포인트가 있습니다. 안되는 이유에 대해서 설명을 시도한다면, 더 많은 점수를 주세요. document.write()를 언제 사용하시나요? 정답 : 1999년 - 초보개발자를 걸러내기 위한 시절 UA문자열을 이용하여 기능 검출(feature detection)과 기능 추론(feature inference)의 차이점을 설명 하시오. AJAX에 관해 가능한 자세히 설명하세요. JSONP가 어떻게 동작 되는지 설명하세요.(그리고,실제 AJAX와 어떻게 다른지 설명하세요.) 기존에 Javascript 템플릿을 사용한 적이 있나요? 만약에 있다면, 어떠한 방식으로 사용했는지 말씀해주세요. “호이스팅(Hoisting)”에 대해서 설명 하시오. FOUC가 무엇이며 FOUC를 어떻게 방지하나요? 이벤트 버블링(Event Bubbling)에 대해서 설명하세요. “속성(Attribute)”와 “요소(property)”의 차이가 무엇인가요? Javascript 객체를 확장하는 것이 좋지 않은 이유는 무엇인가요? Document Load 이벤트와 Ready 이벤트의 차이가 무엇인가요? ==와 ===의 차이점은 무엇인가요? 브라우저의 URL에서 파라메터를 얻을 수 있는 방법에 대해서 설명하세요. Javascript의 “동일출처정책(the same-origin policy)”에 대해서 설명하세요. 이벤트 딜리게이션(Event Delegation)에 대해서 설명하세요. Javascript의 상속패턴(inheritance patterns)에 대해서 설명하세요. 다음 코드를 동작하게 만드세요. [1,2,3,4,5].duplicator(); // [1,2,3,4,5,1,2,3,4,5] Javascript에서 메모이제이션(memoization, 중복 계산 방지)에 대한 전략을 설명해주세요. 삼항식(Ternary statement)을 사용하는 이유는 무엇이고, 그것을 표현하기 위한 연산자 단어는 무엇인가요? arity는 어떠한 함수인가요?","categories":[{"name":"Front-end","slug":"Front-end","permalink":"https://nopinokio.github.io/categories/Front-end/"}],"tags":[{"name":"html","slug":"html","permalink":"https://nopinokio.github.io/tags/html/"},{"name":"javascript","slug":"javascript","permalink":"https://nopinokio.github.io/tags/javascript/"},{"name":"css","slug":"css","permalink":"https://nopinokio.github.io/tags/css/"},{"name":"interview","slug":"interview","permalink":"https://nopinokio.github.io/tags/interview/"}]},{"title":"Yslow성능 향상 Tip","slug":"1-005-yslow-improvement-of-efficiency-tip","date":"2017-11-07T02:42:28.000Z","updated":"2017-11-16T00:30:10.000Z","comments":true,"path":"2017/11/07/1-005-yslow-improvement-of-efficiency-tip/","link":"","permalink":"https://nopinokio.github.io/2017/11/07/1-005-yslow-improvement-of-efficiency-tip/","excerpt":"","text":"Chapter 01. HTTP 요청을 줄여라1. 이미지 맵(Image map)이미지 맵 을 이용하면 웹 페이지 UI 변경 없이 HTTP 요청 수를 줄일 수 있다. 그 이유는 한 개의 이미지로 여러 개의 URL 을 연결 할 수 있기 때문이다. 이미지 맵을 사용하면 장점으로는 보통 50% 빠른 속도를 보이는데, 단점으로는 클라이언트 측 맵으로 코드를 작성 할 경우 맵의 영역 좌표를 수동으로 하는 경우 지루하고 실수하기 쉽다. 그리고 네모가 아닌 다른 모양을 만드는 것을 거의 불가능하며 연속적인 이미지여야 하는 안 좋은 점이 있다. 2. CSS SpriteCSS Sprite 는 이미지 맵처럼 여러 이미지를 결합할 수 있지만 이미지 맵보다 훨씬 유연하다. 보통 CSS 의 background-position 속성을 이용해서 배경으로 사용할 부분을 잘라서 위치시킨다. 역시 분리된 이미지를 사용할 때보다 50% 빠르고 다운로드 크기가 줄어들 수 있으며(합쳐진 이미지가 컬러테이블이나 포맷정보를 하나로 가지고 있기 때문), 이미지 맵처럼 연속적인 이미지여야 한다는 제약사항도 없는 장점이 있다. 3. 인라인이미지data:라는 URL 스키마를 이용함으로써 어떤 추가적인 HTTP 요청 없이 웹 페이지 안에 이미지를 포함할 수 있다. data:[][;base64], 처럼 데이터를 첨부할 수 있으며 SCRIPT나 A 태그와 같이 URL을 지정하는 모든 곳에 사용할 수 있다. 단점은 IE 지원이 안된다는 것과 크기에 제한이 있고 base64로 인코딩을 하게 되면 이미지 크기가 커진다. data:를 사용하는 좋은 방법으로는 CSS를 이용해서 배경으로 인라인 이미지를 사용하는 것이다. 4. 스크립트와 스타일시트의 결합가장 이상적인 상황은 각 페이지에 하나의 스크립트와 한 개의 스타일시트가 있는 것이다. 그러나 현실은 모듈 방식의 코드를 사용하기 때문에 자바스크립트 파일을 모듈화하여 여러 파일로 나누어 놓되 이렇게 모듈화된 스크립트 파일을 사용하는 페이지에 맞게 재구성하는 빌드 과정을 두는 것이다. Chapter02. 콘텐츠 전송 네트워크를 이용하라.CDN을 이용하라서비스의 이용자가 늘게 되어 서버를 증설하게 되면 서버의 콘텐츠를 지리적으로 분산된 여러 개의 서버에 나누어 놓아야 할 필요가 생긴다. 콘텐츠를 지리적으로 분산시킬 때 먼저 웹 애플리케이션을을 분산 구조에 맞게 재설계하는 작업을 피하고, 웹 페이지 구성요소가 저장되어 있는 웹 서버를 먼저 분산시켜 놓는 것이 더 좋은 선택일 수 있고 이는 CDN(Contents Delivery Network)를 이용하면 더 쉽게 구현할 수 있다. CDN은 사용자에게 효율적으로 콘텐츠를 전달하기 위해서 여러 지역에 웹 서버를 분산시켜 놓는 기술인다. 이는 응답시간을 줄이며, 백업, 저장용량의 확대, 캐싱기능을 갖고 이미지, 스크립트, 스타일시트, 플래시와 같은 정적 콘텐츠를 전달할 때 이용된다. 대신에 조심해야 할 점으로는 HTTP 리다이렉트를 이용해 로컬 서버를 이용하도록 하는 방식의 CDN은 일단 조심하는 것이 좋다. 웹 페이지를 느리게 하는 원인이 되기 때문이다. 또한 단점으로는 다른 웹 사이트의 트래픽에 내 사이트가 영향을 받을 수 있다는 점, 콘텐츠를 담고 있는 서버를 직접적으로 제어하지 못해 가끔 불편한 점이 있다. 결론 : CDN을 실 서비스에 적용했을 때 야후쇼핑 사이트의 응답 시간은 전체적으로 20%가 향상되었다. 단지 정적인 구성요소를 CDN으로 옮겼을 뿐인데 말이다. Chapter03. 헤더에 만료기간을 추가하라사이트에 처음 방문한 사용자일 경우 여러 번의 HTTP 요청을 하게 될지도 모르지만 헤더 만료기한(Expires)을 이용함으로써 그 구성요소를 캐시에 저장할 수 있다. 1.헤더의 만료기간브라우저 캐시를 이용하여 HTTP의 요청 수를 줄일 수 있다. Expires헤더에서 지정한 시간 이후에는 해당 응답의 내용이 더 이상 유효하지 않다는 것이다. 2. max-age 와 mod_expires 속성Expires는 지정된 날짜를 이용하기 때문에 서버와 클라이언트가 시간을 맞추어 사용해야며 만료일에 대해 갱신해야 한다는 단점이 있다. 그리하여 HTTP/1.1 에서 소개된 Cache-Control은 Expires 의 한계를 보완하고자 max-age 속성을 설정하여 얼마 동안 캐시에 보관할지를 설정한다. 하지만 HTTP/1.1 을 지원하지 않는 브라우저에서는 Expires를 사용해야 하는데 기존의 단점이 문제가 된다. 그 단점을 보완하고자 아파치에서 mod_expires 라는 모듈을 제공하고 있고 이 기능은 Expires 를 max-age 와 비슷하게 상대적인 시간으로 지정할 수 있게 해 준다. 둘 다 설정되어 있을 경우 우선순위는 Cache-Control 이 높으며 시간을 재설정하는 수고를 덜 수 있을 것이다. 3. 빈 캐시와 꽉 찬 캐시서비스의 형태와 함께 PV, UV 를 고려하여 Expires를 생각하여야 한다. 4. 이미지 그 이상으로헤더의 Expires는 이미지에 보통 사용하지만 이미지에 국한되어서는 최고의 성능을 발휘할 수 없다. 헤더의 Expires 속성은 스크립트나 스타일시트, 플래시와 같이 자주 변하지 않는 것에도 포함시켜야 한다. 5. 파일 이름의 활용Expires가 설정된 상태에서 서버의 구성요소를 변경하였을 경우 사용자가 최신 정보를 받아보기 위해서 가장 좋은 방법은 구성요소의 주소를 변경하는 것이다. 그렇게 해서 서버로부터 완전히 새로운 구성요소를 로드하게 만드는 것이다.(ex.구성요소의 파일에 버전을 붙임)","categories":[{"name":"Front-end","slug":"Front-end","permalink":"https://nopinokio.github.io/categories/Front-end/"},{"name":"css","slug":"Front-end/css","permalink":"https://nopinokio.github.io/categories/Front-end/css/"}],"tags":[{"name":"html","slug":"html","permalink":"https://nopinokio.github.io/tags/html/"},{"name":"javascript","slug":"javascript","permalink":"https://nopinokio.github.io/tags/javascript/"},{"name":"css","slug":"css","permalink":"https://nopinokio.github.io/tags/css/"}]},{"title":"웹접근성 check list","slug":"1-004-web-accessibility-check-list","date":"2017-11-06T09:09:28.000Z","updated":"2017-11-16T00:30:28.000Z","comments":true,"path":"2017/11/06/1-004-web-accessibility-check-list/","link":"","permalink":"https://nopinokio.github.io/2017/11/06/1-004-web-accessibility-check-list/","excerpt":"","text":"No. 항목명 고려부서 Level 1 이미지(그림, 사진, 로고, 차트, 다이어그램, 배경처리된 이미지, 동적으로 제공하는 이미지, 플래시의 Name값 등)에 적절한 대체 텍스트를 제공하는가? 사용자 입력 이미지의 경우, 대체 텍스트를 넣을 수 있는 입력폼을 제공하는가? 기획, 디자인, 퍼블리싱, 개발 1 2 W3C Validation을 통과하는가? 퍼블리싱 2 3 주요 콘텐츠 제목을 h1~h6로 마크업했는가? 기획, 퍼블리싱 1 4 표는 table로 표의 머리글은 th로 마크업했으며 scope 속성을 제공하는가? 퍼블리싱 2 5 thead, tbody, tfoot으로 그룹핑 되어 있는가? (th로 그룹핑 안될경우 thead생략가능, tbody만 있을 경우 tbody생략 가능) 퍼블리싱 1 6 table에 caption이 적절하게 선언되었는가? 퍼블리싱 3 7 플러그인이 설치되지 않은 환경에서 플러그인이 필요한 객체가 삽입될 경우, 플러그인 안내 메시지와 적절한 대체 콘텐츠를 제공하는가? 기획, 퍼블리싱, 개발 1 8 콘텐츠가 논리적인 순서로 되어 있는가? 퍼블리싱 1 9 HTML 코드에 주언어 관련 속성lang이 선언되어 있는가? 퍼블리싱 1 10 서비스 특성상 시간 제한이 있는 경우, 시간제한이 있는 콘텐츠임을 사전에 공지하고 있으며 남은 시간에 대해 알려주고 있는가? 기획, 디자인, 퍼블리싱, 개발 2 11 자동으로 갱신되는 콘텐츠에 마우스 오버, 키보드 포커스 내용이 정지되는가? 또는 사용자가 제어할 수 있는 버튼(이전, 다음, 정지)버튼을 함께 제공하고 있는가? 기획, 디자인, 퍼블리싱, 개발 1 12 콘텐츠와 배경간의 명도 대비는 4.5:1 이상이 되는가? (배경, 로고는 제외. 큰 글자(24px이상이거나 굵은 18.66px)는 3:1 이상) 기획, 디자인, 퍼블리싱 1 13 마우스 이벤트(drag &amp; drop, 마우스오버 등)로 동작하는 기능은 키보드로도 동일한 목적을 달성할 수 있는가? 퍼블리싱 3 14 키보드 포커스가 논리적인 순서로 이동하는가? 퍼블리싱 2 15 브라우저에서 기본적으로 제공하는 포커스 표시를 없애지는 않았는가? 디자인, 퍼블리싱 1 16 사용자가 의도하지 않은 기능(초점 변화, 서식 전송, 새 창, 팝업, 레이어)이 실행된 곳은 없는가? 기획, 퍼블리싱, 개발 1 17 웹 페이지의 제목이 title이 제대로 반영이 되었는가? 기획, 퍼블리싱, 개발 2 18 프레임이 사용될 때 프레임의 제목이 title 속성 값에 제대로 반영이 되었는가? 퍼블리싱 1 19 반복되는 콘텐츠(메뉴 등)가 있을 경우 이를 건너뛸 수 있는 링크를 제공하며, 키보드로도 접근이 가능한가? 퍼블리싱 2 20 링크텍스트나 버튼의 레이블은 그 의미를 정확하게 파악할 수 있는가? 기획, 퍼블리싱 1 21 폼 콘트롤 요소에는 적절한 label을 제공하며, 폼 콘트롤 요소의 id값과 label의 for값을 동일하게 제공하는가? 퍼블리싱, 개발 1","categories":[{"name":"Front-end","slug":"Front-end","permalink":"https://nopinokio.github.io/categories/Front-end/"},{"name":"html","slug":"Front-end/html","permalink":"https://nopinokio.github.io/categories/Front-end/html/"}],"tags":[{"name":"html","slug":"html","permalink":"https://nopinokio.github.io/tags/html/"},{"name":"markup","slug":"markup","permalink":"https://nopinokio.github.io/tags/markup/"},{"name":"web accessibility","slug":"web-accessibility","permalink":"https://nopinokio.github.io/tags/web-accessibility/"}]},{"title":"HEXO 마크다운 포스트에 이미지 DROPBOX 업로드","slug":"1-003-githubpage-image-dropbox-upload","date":"2017-11-06T07:31:21.000Z","updated":"2017-11-16T00:30:46.000Z","comments":true,"path":"2017/11/06/1-003-githubpage-image-dropbox-upload/","link":"","permalink":"https://nopinokio.github.io/2017/11/06/1-003-githubpage-image-dropbox-upload/","excerpt":"","text":"네이버 블로그나 티스토리 블로그 같은경우는 글쓰기 하면서 같이 이미지를 업로드 하는방식이라서 이미지업로드에 대한 고민이 없다.github page를 하면서 github저장소 폴더에 매번 업로드 할수도 없는 노릇이고 그게 한두개이면 모르겠지만 양이 많아지게 되면 관리도 안될것같았다. 아니면 이미지 웹서버를 하나를 만들어서 올리면 github page를 쓰는 장점도 없어지게 되는거고… 그래서 구글링 해보았더니 DropBox에 이미지를 업로드 하고 그 파일을 공유해서 그 링크를 첨부하는 방식이 있다고 한다.이미지 공유를 하면 아래같은 형식으로 공유가 된다. https://www.dropbox.com/s/usercode/image.gif?dl=0 위의 주소에서 약간 수정 해서 사용하면 된다. 1．https 를 http로 변경. 2．앞부분의 www.를 지우고 dl.로 변경 3．?dl=0 삭제 http://dl.dropbox.com/s/usercode/image.gif 위의 링크를 사용하면 마음껏 이미지를 공유 할수 있게 된다. 그래서 처음 업로드한 이미지들….","categories":[{"name":"WEB","slug":"WEB","permalink":"https://nopinokio.github.io/categories/WEB/"},{"name":"hexo","slug":"WEB/hexo","permalink":"https://nopinokio.github.io/categories/WEB/hexo/"}],"tags":[{"name":"github page","slug":"github-page","permalink":"https://nopinokio.github.io/tags/github-page/"},{"name":"hexo","slug":"hexo","permalink":"https://nopinokio.github.io/tags/hexo/"},{"name":"image","slug":"image","permalink":"https://nopinokio.github.io/tags/image/"},{"name":"upload","slug":"upload","permalink":"https://nopinokio.github.io/tags/upload/"},{"name":"gif","slug":"gif","permalink":"https://nopinokio.github.io/tags/gif/"}]},{"title":"브라우저 렌더링 - 리플로우(Reflow)와 리페인트(Repaint)","slug":"1-002-browser-rendering-reflow-repaint","date":"2017-11-05T12:03:09.000Z","updated":"2017-11-16T00:31:14.000Z","comments":true,"path":"2017/11/05/1-002-browser-rendering-reflow-repaint/","link":"","permalink":"https://nopinokio.github.io/2017/11/05/1-002-browser-rendering-reflow-repaint/","excerpt":"","text":"렌더링 과정1) DOM 트리 생성2) 스타일 구조체 생성3) 렌더 트리 생성4) 레이아웃 처리5) Paint6) 페이지 기능에 따라 Reflow, Repaint가 추가로 발생 reflow생성된 DOM 노드의 레이아웃(너비, 높이 등) 변경 시, 영향받은 모든 노드(자식, 부모 등)의 수치를 다시 계산하여 렌더 트리를 재생성하는 작업 123function reflow() &#123; document.getElementById('test').style.width = '100px'; return false;&#125; repaintReflow 과정이 끝난 후 재생성된 렌더 트리를 다시 그리는 작업.수치와 상관없는 background-color, visibillty, outline 등의 스타일 변경 시에는 Reflow 과정이 생략된 Repaint 작업만 수행함. 123function repaint() &#123; document.getElementById('test').style.backgroundColor = 'red'; return false;&#125; reflow와 repaint는 부하가 높기 때문에, UX를 안좋게 하거나 UI의 반응이 느려지는 원인이 된다.특히 reflow가 더 부하가 높기땨문에 DOM 조작 시 성능을 염두한 코딩이 필요하다.","categories":[{"name":"Front-end","slug":"Front-end","permalink":"https://nopinokio.github.io/categories/Front-end/"},{"name":"javascript","slug":"Front-end/javascript","permalink":"https://nopinokio.github.io/categories/Front-end/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://nopinokio.github.io/tags/javascript/"},{"name":"reflow","slug":"reflow","permalink":"https://nopinokio.github.io/tags/reflow/"},{"name":"repaint","slug":"repaint","permalink":"https://nopinokio.github.io/tags/repaint/"},{"name":"browser","slug":"browser","permalink":"https://nopinokio.github.io/tags/browser/"}]},{"title":"헤딩태그 부제(subheading)를 표현하는 HTML 마크업","slug":"1-001-html-markup-subheading","date":"2017-11-02T01:52:31.000Z","updated":"2017-11-16T00:31:50.000Z","comments":true,"path":"2017/11/02/1-001-html-markup-subheading/","link":"","permalink":"https://nopinokio.github.io/2017/11/02/1-001-html-markup-subheading/","excerpt":"","text":"글의 구조를 마크업할 때 고민해야 할 게 많다. 이번에 다룰 것은 부제를 HTML 태그로 어떻게 표현해야 할 것인가다.결론적으로 나는 아래처럼 사용하기로 마음먹었다. 1234&lt;header&gt; &lt;p class=\"subheading\"&gt;[박근혜 탄핵]&lt;/p&gt; &lt;h1&gt;美 매체들 \"한국 민주주의 발전 보여준 파면 결정\"…이정미 재판관도 조명&lt;/h1&gt; &lt;/header&gt; 명세를 확인하는 게 올바른 사용법을 아는 지름길이다. 클리어보스에서 여러 번 들었던 말인데 최근 새삼 느꼈다.자세한 내용은 4.12.1 Subheadings, subtitles, alternative titles and taglines 항목에서 찾아 볼 수 있다. HTML에는 부제를 표현하는 태그가 없으며, 아래와 같은 방법을 제안한다 하고 설명이 돼 있다. 명세가 제안하는 방법은 세 가지다. 기호를 사용해서 구분하는 방법1&lt;h1&gt;美 매체들 \"한국 민주주의 발전 보여준 파면 결정\"…이정미 재판관도 조명&lt;/h1&gt; 위처럼 -로 구분할 수 있다. :으로 구분해도 될 것이다. 그러나 이 방법은 앞의 것이 부제인지 뒤의 것이 부제인지 구분하기 힘들다는 단점이 있다. 위 경우 앞의 것이 부제다. 제목(heading) 태그 안에 span 등을 넣어 표시하는 방법1234&lt;h1&gt; &lt;span class=\"subheading\"&gt;[박근혜 탄핵]&lt;/span&gt; 美 매체들 \"한국 민주주의 발전 보여준 파면 결정\"…이정미 재판관도 조명&lt;/h1&gt; 2015년 6월 7일 &lt;신문사이트&gt;가 취하고 있는 방법이다. 이건 명세 보고 한 건 아니고 그냥 내가 생각해 냈던 방법인데, 명세에도 이런 예시가 있었다. 이 방법의 단점은, CSS를 걷어냈을 때 부제와 제목을 구분할 수 없게 된다는 점이다. 그래서 중간에 보이지 않는 - 같은 것을 넣을까 고민하기도 했다. 아래처럼 말이다. 1234&lt;h1&gt; &lt;span class=\"subheading\"&gt;[박근혜 탄핵]&lt;/span&gt; &lt;span class=\"hidden\"&gt;-&lt;/span&gt; 美 매체들 \"한국 민주주의 발전 보여준 파면 결정\"…이정미 재판관도 조명 &lt;/h1&gt; 위 예제는 W3 명세에는 없는 것이고, 내가 생각해 본 것이다. 그런데 여튼, header 안에 넣는 방법을 사용하면 이 문제가 해결되므로 사용해 볼 이유는 없어졌다. header 안에 p로 넣는 방법1234&lt;header&gt; &lt;p class=\"subheading\"&gt;[박근혜 탄핵]&lt;/p&gt; &lt;h1&gt;美 매체들 \"한국 민주주의 발전 보여준 파면 결정\"…이정미 재판관도 조명&lt;/h1&gt;&lt;/header&gt; 이렇게 하면 CSS를 걷어냈을 때도 부제와 제목이 구분된다. 아울러 hgroup 태그를 사용하지 않는다고 밝힌 명세에서는 header뿐 아니라 div로도 부제를 묶을 수 있다고 적었다(아래 hgroup 부분 참고). 물론 난 그냥 header를 사용할 생각이다. hgroup 태그는 명세에서 없어졌다hgroup 태그는 명세에서 더이상 사용하지 않는다(obsolete)고 분류됐다. 아래는 번역이다. 그 밑에 원문을 붙였다. hgroup부제를 마크업하기 위해 제목을 담고 있는 h1-h6 요소 뒤에 오는 p 요소에 부제를 넣는 것을 고려하라. 아니면, 부제를 제목을 담고 있는 h1-h6 요소 안에 바로 집어 넣어라. 단, 기호 등으로 제목과 구분해라. 예컨대, span class=”subheading” 요소 같은 것에 스타일을 다르게 줘서 말이다.제목, 부제, 대등 제목(alternative titles)이나 태그라인은 header나 div 요소로 묶을 수 있다. hgroupTo mark up subheadings, consider putting the subheading into a p element after the h1-h6 element containing the main heading, or putting the subheading directly within the h1-h6 element containing the main heading, but separated from the main heading by punctuation and/or within, for example, a span class=”subheading” element with differentiated styling.Headings and subheadings, alternative titles, or taglines can be grouped using the header or div elements.","categories":[{"name":"Front-end","slug":"Front-end","permalink":"https://nopinokio.github.io/categories/Front-end/"},{"name":"html","slug":"Front-end/html","permalink":"https://nopinokio.github.io/categories/Front-end/html/"}],"tags":[{"name":"html","slug":"html","permalink":"https://nopinokio.github.io/tags/html/"},{"name":"heading","slug":"heading","permalink":"https://nopinokio.github.io/tags/heading/"},{"name":"markup","slug":"markup","permalink":"https://nopinokio.github.io/tags/markup/"},{"name":"tag","slug":"tag","permalink":"https://nopinokio.github.io/tags/tag/"}]}]}